
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  stripeCustomerId String?
  sessions         Session[]
  accounts         Account[]
  weddingLists     WeddingList[]
  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model WeddingList {
  id            String         @id @default(cuid())
  slug          String         @unique
  brideName     String
  groomName     String
  weddingDate   DateTime?
  pixKey        String
  pixType       PixType
  coverImage    String?
  message       String?
  theme         String
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  gifts         Gift[]
  contributions Contribution[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("wedding_lists")
}

model Gift {
  id            String         @id @default(cuid())
  name          String
  description   String?
  price         Float
  imageUrl      String?
  status        GiftStatus
  weddingListId String
  weddingList   WeddingList    @relation(fields: [weddingListId], references: [id], onDelete: Cascade)
  contributions Contribution[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("gifts")
}

model Contribution {
  id               String      @id @default(cuid())
  contributorName  String
  contributorEmail String?
  contributorPhone String?
  amount           Float
  message          String?
  isPublic         Boolean
  userConfirmed    Boolean
  confirmedAt      DateTime?
  proofImageUrl    String?
  proofFileName    String?
  pixKey           String
  pixKeyType       PixType
  qrCodeData       String?
  weddingListId    String
  weddingList      WeddingList @relation(fields: [weddingListId], references: [id], onDelete: Cascade)
  giftId           String?
  gift             Gift?       @relation(fields: [giftId], references: [id], onDelete: SetNull)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@map("contributions")
}

enum PixType {
  CPF
  CNPJ
  EMAIL
  PHONE
  RANDOM_KEY
}

enum GiftStatus {
  AVAILABLE
  PARTIALLY_FUNDED
  FULLY_FUNDED
}
